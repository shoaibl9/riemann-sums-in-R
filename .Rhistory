ggplot(data.frame(x=c(start, end)), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(xmins), xmax = c(xmaxs), ymin = c(ymins), ymax = c(ymaxs))
# graph
ggplot(data.frame(x=c(start, end)), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = xmins, xmax = xmaxs, ymin = ymins, ymax = ymaxs)
xmins
library("ggplot2")
# getting desired constants from user
a = as.integer(readline(prompt="Enter 1st coefficient:"))
b = as.integer(readline(prompt="Enter 2nd coefficient:"))
c = as.integer(readline(prompt="Enter 3rd coefficient:"))
# getting endpoints
start = as.integer(readline(prompt="Enter left bound (x = ?):"))
end = as.integer(readline(prompt="Enter right bound (x = ?):"))
# getting subintervals
n = as.integer(readline(prompt="How many subintervals:"))
# creating functions
f <- function(x){
return (a*x^2 + b*x + c)
}
xline <- function(x){
return(0)
}
# testing output to make sure function is running correct
f(0)
f(1)
f(2)
# creating the approximating rectangles
delta_x <- (end - start) / n
xmins <- xmaxs <- ymins <- ymaxs <- c()
temp <- start + delta_x
xmins <- append(xmins, start, after = length(xmins))
while (temp < end) {
xmins <- append(xmins, temp, after = length(xmins))
xmaxs <- append(xmaxs, temp, after = length(xmaxs))
temp <- temp + delta_x
}
xmaxs <- append(xmaxs, temp)
temp <- start
while (temp < end) {
ymins <- append(ymins, min(0, f(start)))
ymaxs <- append(ymaxs, max(0, f(start)))
temp <- temp + delta_x
}
# graph
ggplot(data.frame(x=c(start, end)), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = xmins, xmax = xmaxs, ymin = ymins, ymax = ymaxs)
# graph
ggplot(data.frame(x=c(start, end)), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2), xmax = c(-2, -1), ymin = c(0, 0), ymax = c(5, 5))
# graph
ggplot(data.frame(x=c(start, end)), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2), xmax = c(-2, -1), ymin = c(0, 2), ymax = c(5, 3))
# graph
ggplot(data.frame(x=c(start, end)), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2, -1), xmax = c(-2, -1, 0), ymin = c(0, 2, 0), ymax = c(5, 3, 5))
# graph
ggplot(data.frame(x=c(start, end)), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2), xmax = c(-2, -1), ymin = c(0, 2), ymax = c(5, 3))
data
# graph
ggplot(data.frame(x=c(start, end)), aes(x = x)) +
#  stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2), xmax = c(-2, -1), ymin = c(0, 2), ymax = c(5, 3))
# graph
ggplot(data.frame(x=c(start, end)), aes(x = x)) +
#  stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2), xmax = c(-2, -1), ymin = c(0, 0), ymax = c(5, 5))
# graph
ggplot(data.frame(x=c(start, end)), aes(x = x)) +
#  stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2, -1), xmax = c(-2, -1, 0), ymin = c(0, 0, 0), ymax = c(5, 5, 5))
# graph
ggplot(data.frame(x=c(start, end)), aes(x = x)) +
#  stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(inherit.aes = F, xmin = c(-3, -2, -1), xmax = c(-2, -1, 0), ymin = c(0, 0, 0), ymax = c(5, 5, 5))
# graph
ggplot(data.frame(x=c(start, end)), aes(x = x)) +
#  stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(inherit.aes = F, xmin = c(-3, -2), xmax = c(-2, -1), ymin = c(0, 0), ymax = c(5, 5))
# graph
ggplot(data.frame(x=c(start, end)), aes(x = x)) +
#  stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(inherit.aes = F, xmin = c(-3, -2, -1), xmax = c(-2, -1, 0), ymin = c(0, 0, 0), ymax = c(5, 5, 5))
# graph
ggplot(data.frame(x=c(start, end)), aes(x = x)) +
#  stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(inherit.data = F, xmin = c(-3, -2, -1), xmax = c(-2, -1, 0), ymin = c(0, 0, 0), ymax = c(5, 5, 5))
# graph
ggplot(data.frame(x=c(start, end)), aes(x = x)) +
#  stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2), xmax = c(-2, -1), ymin = c(0, 0), ymax = c(5, 5))
# graph
ggplot(data.frame(x=c(start, end)), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2), xmax = c(-2, -1), ymin = c(0, 0), ymax = c(5, 5))
length(data)
?data
# graph
ggplot(data.frame(x=c(start)), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2), xmax = c(-2, -1), ymin = c(0, 0), ymax = c(5, 5))
# graph
ggplot(data.frame(x=c(start, end)), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2), xmax = c(-2, -1), ymin = c(0, 0), ymax = c(5, 5))
# graph
ggplot(data.frame(x=c(-3, 3)), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2), xmax = c(-2, -1), ymin = c(0, 0), ymax = c(5, 5))
# graph
ggplot(aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2), xmax = c(-2, -1), ymin = c(0, 0), ymax = c(5, 5))
# graph
ggplot(data.frame(), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2), xmax = c(-2, -1), ymin = c(0, 0), ymax = c(5, 5))
# graph
ggplot(data.frame(x), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2), xmax = c(-2, -1), ymin = c(0, 0), ymax = c(5, 5))
# graph
ggplot(data.frame(x=c(-100, 100)), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2), xmax = c(-2, -1), ymin = c(0, 0), ymax = c(5, 5))
# graph
ggplot(data.frame(x=c(-100, 100, 200)), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2), xmax = c(-2, -1), ymin = c(0, 0), ymax = c(5, 5))
# graph
ggplot(data.frame(x=c(-100, 100, 200)), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2, -1), xmax = c(-2, -1, 0), ymin = c(0, 0, 0), ymax = c(5, 5, 5))
# graph
ggplot(data.frame(x=c(-3, 0, 3)), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2, -1), xmax = c(-2, -1, 0), ymin = c(0, 0, 0), ymax = c(5, 5, 5))
# graph
ggplot(data.frame(x=c(-3, 3)), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2, -1), xmax = c(-2, -1, 0), ymin = c(0, 0, 0), ymax = c(5, 5, 5))
# graph
ggplot(data.frame(x=c(-3, -2, 3)), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2, -1), xmax = c(-2, -1, 0), ymin = c(0, 0, 0), ymax = c(5, 5, 5))
# graph
ggplot(data.frame(x=c(-3, -1, 3)), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = c(-3, -2, -1), xmax = c(-2, -1, 0), ymin = c(0, 0, 0), ymax = c(5, 5, 5))
library("ggplot2")
# getting desired constants from user
a = as.integer(readline(prompt="Enter 1st coefficient:"))
b = as.integer(readline(prompt="Enter 2nd coefficient:"))
c = as.integer(readline(prompt="Enter 3rd coefficient:"))
# getting endpoints
start = as.integer(readline(prompt="Enter left bound (x = ?):"))
end = as.integer(readline(prompt="Enter right bound (x = ?):"))
# getting subintervals
n = as.integer(readline(prompt="How many subintervals:"))
# creating functions
f <- function(x){
return (a*x^2 + b*x + c)
}
xline <- function(x){
return(0)
}
# testing output to make sure function is running correct
f(0)
f(1)
f(2)
# creating the approximating rectangles
delta_x <- (end - start) / n
xmins <- xmaxs <- ymins <- ymaxs <- custom <- c()
temp <- start + delta_x
xmins <- append(xmins, start, after = length(xmins))
custom <- append(xmins, start, after = length(xmins))
while (temp < end) {
xmins <- append(xmins, temp, after = length(xmins))
xmaxs <- append(xmaxs, temp, after = length(xmaxs))
custom <- append(xmaxs, temp, after = length(custom))
temp <- temp + delta_x
}
xmins <- xmaxs <- ymins <- ymaxs <- custom <- c()
temp <- start + delta_x
xmins <- append(xmins, start, after = length(xmins))
custom <- append(xmins, start, after = length(xmins))
xmins <- xmaxs <- ymins <- ymaxs <- custom <- c()
temp <- start + delta_x
xmins <- append(xmins, start, after = length(xmins))
custom <- append(customs, start, after = length(custom))
xmins <- xmaxs <- ymins <- ymaxs <- custom <- c()
temp <- start + delta_x
xmins <- append(xmins, start, after = length(xmins))
custom <- append(custom, start, after = length(custom))
while (temp < end) {
xmins <- append(xmins, temp, after = length(xmins))
xmaxs <- append(xmaxs, temp, after = length(xmaxs))
custom <- append(custom, temp, after = length(custom))
temp <- temp + delta_x
}
custom <- head(custom, -1)
xmaxs <- append(xmaxs, temp)
custom <- append(custom, temp)
temp <- start
while (temp < end) {
ymins <- append(ymins, min(0, f(start)))
ymaxs <- append(ymaxs, max(0, f(start)))
temp <- temp + delta_x
}
# graph
ggplot(data.frame(x=custom), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = xmins, xmax = xmaxs, ymin = ymins, ymax = ymaxs)
library("ggplot2")
# getting desired constants from user
a = as.integer(readline(prompt="Enter 1st coefficient:"))
b = as.integer(readline(prompt="Enter 2nd coefficient:"))
c = as.integer(readline(prompt="Enter 3rd coefficient:"))
# getting endpoints
start = as.integer(readline(prompt="Enter left bound (x = ?):"))
end = as.integer(readline(prompt="Enter right bound (x = ?):"))
# getting subintervals
n = as.integer(readline(prompt="How many subintervals:"))
# creating functions
f <- function(x){
return (a*x^2 + b*x + c)
}
xline <- function(x){
return(0)
}
# testing output to make sure function is running correct
f(0)
f(1)
f(2)
# creating the approximating rectangles
delta_x <- (end - start) / n
xmins <- xmaxs <- ymins <- ymaxs <- custom <- c()
temp <- start + delta_x
xmins <- append(xmins, start, after = length(xmins))
custom <- append(custom, start, after = length(custom))
while (temp < end) {
xmins <- append(xmins, temp, after = length(xmins))
xmaxs <- append(xmaxs, temp, after = length(xmaxs))
custom <- append(custom, temp, after = length(custom))
temp <- temp + delta_x
}
custom <- head(custom, -1)
xmaxs <- append(xmaxs, temp)
custom <- append(custom, temp)
temp <- start
while (temp < end) {
ymins <- append(ymins, min(0, f(start)))
ymaxs <- append(ymaxs, max(0, f(start)))
temp <- temp + delta_x
}
# graph
ggplot(data.frame(x=custom), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = xmins, xmax = xmaxs, ymin = ymins, ymax = ymaxs)
library("ggplot2")
# getting desired constants from user
a = as.integer(readline(prompt="Enter 1st coefficient:"))
b = as.integer(readline(prompt="Enter 2nd coefficient:"))
c = as.integer(readline(prompt="Enter 3rd coefficient:"))
# getting endpoints
start = as.integer(readline(prompt="Enter left bound (x = ?):"))
end = as.integer(readline(prompt="Enter right bound (x = ?):"))
# getting subintervals
n = as.integer(readline(prompt="How many subintervals:"))
# creating functions
f <- function(x){
return (a*x^2 + b*x + c)
}
xline <- function(x){
return(0)
}
# testing output to make sure function is running correct
f(0)
f(1)
f(2)
# creating the approximating rectangles
delta_x <- (end - start) / n
xmins <- xmaxs <- ymins <- ymaxs <- custom <- c()
temp <- start + delta_x
xmins <- append(xmins, start, after = length(xmins))
custom <- append(custom, start, after = length(custom))
while (temp < end) {
xmins <- append(xmins, temp, after = length(xmins))
xmaxs <- append(xmaxs, temp, after = length(xmaxs))
custom <- append(custom, temp, after = length(custom))
temp <- temp + delta_x
}
custom <- head(custom, -1)
xmaxs <- append(xmaxs, temp)
custom <- append(custom, temp)
temp <- start
while (temp < end) {
ymins <- append(ymins, min(0, f(start)))
ymaxs <- append(ymaxs, max(0, f(start)))
temp <- temp + delta_x
}
# graph
ggplot(data.frame(x=custom), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = xmins, xmax = xmaxs, ymin = ymins, ymax = ymaxs)
xmins <- xmaxs <- ymins <- ymaxs <- custom <- c()
temp <- start + delta_x
xmins <- append(xmins, start, after = length(xmins))
custom <- append(custom, start, after = length(custom))
while (temp < end) {
xmins <- append(xmins, temp, after = length(xmins))
xmaxs <- append(xmaxs, temp, after = length(xmaxs))
custom <- append(custom, temp, after = length(custom))
temp <- temp + delta_x
}
custom <- head(custom, -1)
xmaxs <- append(xmaxs, temp)
custom <- append(custom, temp)
temp <- start
while (temp < end) {
ymins <- append(ymins, min(0, f(temp)))
ymaxs <- append(ymaxs, max(0, f(temp)))
temp <- temp + delta_x
}
# graph
ggplot(data.frame(x=custom), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = xmins, xmax = xmaxs, ymin = ymins, ymax = ymaxs)
# graph
ggplot(data.frame(x=custom), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = xmins, xmax = xmaxs, ymin = ymins, ymax = ymaxs, linetype="dotted", alpha=0.5, color="red")
# graph
ggplot(data.frame(x=custom), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = xmins, xmax = xmaxs, ymin = ymins, ymax = ymaxs, linetype="dotted", alpha=0.8, color="red")
# graph
ggplot(data.frame(x=custom), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = xmins, xmax = xmaxs, ymin = ymins, ymax = ymaxs, linetype="dotted", alpha=0.8, color="yellow")
# graph
ggplot(data.frame(x=custom), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = xmins, xmax = xmaxs, ymin = ymins, ymax = ymaxs, linetype="dotted", alpha=0.9, color="yellow")
# graph
ggplot(data.frame(x=custom), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = xmins, xmax = xmaxs, ymin = ymins, ymax = ymaxs, linetype="dotted", alpha=1, color="yellow")
# graph
ggplot(data.frame(x=custom), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = xmins, xmax = xmaxs, ymin = ymins, ymax = ymaxs, linetype="dotted", alpha=0.9, color="yellow")
# graph
ggplot(data.frame(x=custom), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = xmins, xmax = xmaxs, ymin = ymins, ymax = ymaxs, linetype="dotted", alpha=0.8, color="yellow")
# graph
ggplot(data.frame(x=custom), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = xmins, xmax = xmaxs, ymin = ymins, ymax = ymaxs, linetype="dotted", alpha=0.8, color="purple")
# graph
ggplot(data.frame(x=custom), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = xmins, xmax = xmaxs, ymin = ymins, ymax = ymaxs, linetype="dashed", alpha=0.8, color="purple")
# graph
ggplot(data.frame(x=custom), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = xmins, xmax = xmaxs, ymin = ymins, ymax = ymaxs, linetype="dashed", alpha=0.8, color="yellow")
# graph
ggplot(data.frame(x=custom), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = xmins, xmax = xmaxs, ymin = ymins, ymax = ymaxs, linetype="dotted", alpha=0.8, color="yellow")
# getting endpoints
start = as.integer(readline(prompt="Enter left bound (x = ?):"))
end = as.integer(readline(prompt="Enter right bound (x = ?):"))
5# getting subintervals
# getting subintervals
n = as.integer(readline(prompt="How many subintervals:"))
# creating functions
f <- function(x){
return (a*x^2 + b*x + c)
}
xline <- function(x){
return(0)
}
# testing output to make sure function is running correct
f(0)
f(1)
f(2)
# creating the approximating rectangles
delta_x <- (end - start) / n
xmins <- xmaxs <- ymins <- ymaxs <- custom <- c()
temp <- start + delta_x
xmins <- append(xmins, start, after = length(xmins))
custom <- append(custom, start, after = length(custom))
while (temp < end) {
xmins <- append(xmins, temp, after = length(xmins))
xmaxs <- append(xmaxs, temp, after = length(xmaxs))
custom <- append(custom, temp, after = length(custom))
temp <- temp + delta_x
}
custom <- head(custom, -1)
xmaxs <- append(xmaxs, temp)
custom <- append(custom, temp)
temp <- start
while (temp < end) {
ymins <- append(ymins, min(0, f(temp)))
ymaxs <- append(ymaxs, max(0, f(temp)))
temp <- temp + delta_x
}
# graph
ggplot(data.frame(x=custom), aes(x = x)) +
stat_function(fun = f) + # custom function
geom_vline(xintercept = 0) + # y-axis
stat_function(fun = xline) + # x-axis
geom_rect(xmin = xmins, xmax = xmaxs, ymin = ymins, ymax = ymaxs, linetype="dotted", alpha=0.8, color="yellow")
